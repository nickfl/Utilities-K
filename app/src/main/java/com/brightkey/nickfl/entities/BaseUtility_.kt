package com.brightkey.nickfl.entities

import com.brightkey.nickfl.entities.BaseUtilityCursor.Factory
import io.objectbox.EntityInfo
import io.objectbox.annotation.apihint.Internal
import io.objectbox.internal.CursorFactory
import io.objectbox.internal.IdGetter


// THIS CODE IS GENERATED BY ObjectBox, DO NOT EDIT.

/**
 * Properties for entity "BaseUtility". Can be used for QueryBuilder and for referencing DB names.
 */
class BaseUtility_ : EntityInfo<BaseUtility> {

    override fun getEntityName(): String {
        return __ENTITY_NAME
    }

    override fun getEntityId(): Int {
        return __ENTITY_ID
    }

    override fun getEntityClass(): Class<BaseUtility> {
        return __ENTITY_CLASS
    }

    override fun getDbName(): String {
        return __DB_NAME
    }

    override fun getAllProperties(): Array<io.objectbox.Property<BaseUtility>> {
        return __ALL_PROPERTIES
    }

    override fun getIdProperty(): io.objectbox.Property<BaseUtility> {
        return __ID_PROPERTY
    }

    override fun getIdGetter(): IdGetter<BaseUtility> {
        return __ID_GETTER
    }

    override fun getCursorFactory(): CursorFactory<BaseUtility> {
        return __CURSOR_FACTORY
    }

    @Internal
    internal class BaseUtilityIdGetter : IdGetter<BaseUtility> {
        override fun getId(`object`: BaseUtility): Long {
            return `object`.id
        }
    }

    companion object {

        // Leading underscores for static constants to avoid naming conflicts with property names

        val __ENTITY_NAME = "BaseUtility"

        val __ENTITY_ID = 1

        val __ENTITY_CLASS: Class<BaseUtility> = BaseUtility::class.java

        val __DB_NAME = "BaseUtility"

        val __CURSOR_FACTORY: CursorFactory<BaseUtility> = Factory()

        @Internal
        internal val __ID_GETTER = BaseUtilityIdGetter()

        val __INSTANCE = BaseUtility_()

        val id = io.objectbox.Property(__INSTANCE, 0, 1, Long::class.javaPrimitiveType!!, "id", true, "id")

        val utilityType = io.objectbox.Property(__INSTANCE, 1, 7, String::class.java, "utilityType")

        val billDate = io.objectbox.Property(__INSTANCE, 2, 8, java.util.Date::class.java, "billDate")

        val dueDate = io.objectbox.Property(__INSTANCE, 3, 9, java.util.Date::class.java, "dueDate")

        val datePaid = io.objectbox.Property(__INSTANCE, 4, 4, java.util.Date::class.java, "datePaid")

        val amountDue = io.objectbox.Property(__INSTANCE, 5, 10, Double::class.javaPrimitiveType!!, "amountDue")

        val amountType0 = io.objectbox.Property(__INSTANCE, 6, 11, Double::class.javaPrimitiveType!!, "amountType0")

        val amountType1 = io.objectbox.Property(__INSTANCE, 7, 12, Double::class.javaPrimitiveType!!, "amountType1")

        val amountType2 = io.objectbox.Property(__INSTANCE, 8, 13, Double::class.javaPrimitiveType!!, "amountType2")

        val __ALL_PROPERTIES: Array<io.objectbox.Property<BaseUtility>> = arrayOf<io.objectbox.Property<BaseUtility>>(id, utilityType, billDate, dueDate, datePaid, amountDue, amountType0, amountType1, amountType2)

        val __ID_PROPERTY: io.objectbox.Property<BaseUtility> = id
    }

}
